// 부분집합 구하기 (DFS)
// 자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요.
// n = 3
// 1 2 3
// 1 2
// 1 3
// 1
// 2 3
// 2
// 3

//   2  *  2  *  2  =  8    => 이 부분집합 만드는 원리랑 같음!
// { 1,    2,    3 }
//  o/x   o/x   o/x
// {               }

//                      DFS(1)                          ch[] = [ , 1 , 1 , 1 ] (첫번째는 비워둠)
//                   o          x                              [ , 1 , 1 , 0 ]
//                DFS(2)       DFS(2)                          [ , 1 , 0 , 1 ]
//              o       x
//          DFS(3)      DFS(3)
//        o       x
//   DFS(4)       DFS(4)                            => 요 depth가 종착점. 부분집합 완성
// { 1 2 3 }     { 1 2 }

function solution(n) {
    let answer = [];
    let ch = []; // 각 원소가 부분집합에 포함되는지를 표시하는 배열

    function DFS(L) { // L은 현재 고려 중인 원소의 번호

        if (L == n + 1) { // L이 n+1이 되면 부분집합 하나가 완성된 상태
            let tmp = ""; // 부분집합을 문자열로 저장할 변수
            for (let i = 1; i <= n; i++) {
                if (ch[i] === 1) { // 왼쪽. 부분집합으로 사용하는 경우
                    tmp += i + " ";
                }
            }
            if (tmp) {
                answer.push(tmp.trim()); // 마지막 공백 제거 위해 trim
            }
        } else {
            ch[L] = 1; // 현재 원소 L을 부분집합에 포함
            DFS(L + 1); // 다음 원소로 이동 (재귀 호출)

            ch[L] = 0; // 현재 원소 L을 부분집합에 포함하지 않음
            DFS(L + 1); // 다음 원소로 이동 (재귀 호출)
        }
    }

    DFS(1); // 초기 호출: 1번 원소부터 고려 시작
    return answer;
}

console.log(solution(3));
// 1 2 3
// 1 2
// 1 3
// 1 
// 2 3 
// 2
// 3