// <수열 추측하기>
//가장 윗줄에 1부터 N까지의 숫자가 한 개씩 적혀 있다. 그리고 둘째 줄부터 차례대로 파스칼의 삼각형처럼 위의 두개를 더한 값이 저장되게 된다.
//예를 들어 N이 4 이고 가장 윗 줄에 3 1 2 4 가 있다고 했을 때, 다음과 같은 삼각형이 그려진다.
// 3  1  2  4
//  4  3  6
//   7  9
//    16
//N과 가장 밑에 있는 숫자가 주어져 있을 때 가장 윗줄에 있는 숫자를 구하는 프로그램을 작성하시오.
//단, 답이 여러가지가 나오는 경우에는 사전순으로 가장 앞에 오는 것을 출력하여야 한다.

//     0  1  2  3  4        => 계산한 적 있는 조합의 값을 저장해놓는 2차원 배열 dy (nCr -> n개중 r개를 선택하는 경우)
//   ----------------
// 0 | 1  0  0  0  0
// 1 | 1  1  0  0  0
// 2 | 1  2  1  0  0
// 3 | 1  3  3  1  0
// 4 | 1  4  6  4  1

// <조합 공식>
// nCr = n-1Cr-1 + n-1Cr

// 파스칼의 삼각형의 성질
// 각 위치에 대한 가중치가 고정된 이유는 파스칼의 삼각형의 성질 때문
// 파스칼의 삼각형에서 각 숫자는 그 위 두 숫자의 합 -> 파스칼의 삼각형의 각 줄의 숫자들은 항상 같은 가중치를 가지게 됨
// 예)
// N = 3 인 경우
// b[0] = combi(2, 0) = 1
// b[1] = combi(2, 1) = 2
// b[2] = combi(2, 2) = 1
// N = 5 인 경우
// b[0] = combi(4, 0) = 1
// b[1] = combi(4, 1) = 4
// b[2] = combi(4, 2) = 6
// b[3] = combi(4, 3) = 4
// b[4] = combi(4, 4) = 1

// <b 배열의 역할>
// b 배열은 더하는 과정에서 각 위치에 얼마나 가중치가 곱해지는지를 나타냄
// 예를 들어, 3 1 2 4의 경우, 마지막 숫자 16을 구할 때 3 1 2 4에 각각 곱해지는 가중치가 있음. 이 가중치를 구하기 위해 조합을 사용하는 것
// b[0] = combi(3, 0) = 1 (3에는 1이 곱해짐)
// b[1] = combi(3, 1) = 3 (1에는 3이 곱해짐)
// b[2] = combi(3, 2) = 3 (2에는 3이 곱해짐)
// b[3] = combi(3, 3) = 1 (4에는 1이 곱해짐)

// <p 수열의 변화> (-> p 배열의 각 요소에 b 배열의 가중치를 곱하여 합을 구함)
// [ 1, 0, 0, 0 ]
// [ 1, 2, 0, 0 ]
// [ 1, 2, 3, 0 ]
// [ 1, 2, 3, 4 ]
// [ 1, 2, 4, 4 ]
// [ 1, 2, 4, 3 ]
// [ 1, 3, 4, 3 ]
// [ 1, 3, 2, 3 ]
// [ 1, 3, 2, 4 ]
// [ 1, 3, 4, 4 ]
// [ 1, 3, 4, 2 ]
// [ 1, 4, 4, 2 ]
// [ 1, 4, 2, 2 ]
// [ 1, 4, 2, 3 ]
// [ 1, 4, 3, 3 ]
// [ 1, 4, 3, 2 ]
// [ 2, 4, 3, 2 ]
// [ 2, 1, 3, 2 ]
// [ 2, 1, 3, 2 ]
// [ 2, 1, 3, 4 ]
// [ 2, 1, 4, 4 ]
// [ 2, 1, 4, 3 ]
// [ 2, 3, 4, 3 ]
// [ 2, 3, 1, 3 ]
// [ 2, 3, 1, 4 ]
// [ 2, 3, 4, 4 ]
// [ 2, 3, 4, 1 ]
// [ 2, 4, 4, 1 ]
// [ 2, 4, 1, 1 ]
// [ 2, 4, 1, 3 ]
// [ 2, 4, 3, 3 ]
// [ 2, 4, 3, 1 ]
// [ 3, 4, 3, 1 ]
// [ 3, 1, 3, 1 ]
// [ 3, 1, 2, 1 ]
// [ 3, 1, 2, 4 ]
// [ 3, 1, 4, 4 ]
// [ 3, 2, 4, 4 ]
// [ 3, 4, 4, 4 ]
// [ 4, 4, 4, 4 ]
// [ 3, 1, 2, 4 ]

function solution(n, f) {
    let answer = 0;
    let flag = 0; // 정답을 찾았는지 여부를 표시하는 플래그
    let dy = Array.from(Array(11), () => Array(11).fill(0)); // 조합 값을 저장할 2차원 배열 (메모이제이션)
    let ch = Array.from({ length: n + 1 }, () => 0); // 숫자의 사용 여부를 체크하는 배열 (1이면 사용 중, 0이면 미사용)
    let p = Array.from({ length: n }, () => 0); // 1부터 N까지의 숫자를 담는 순열을 저장. 이를 통해 가능한 모든 수열을 탐색
    let b = Array.from({ length: n }, () => 0); // 조합에 의한 계수를 저장하는 배열

    function combi(n, r) { // 조합 nCr 구하기
        if (dy[n][r] > 0) { // 이미 계산된 값이 있으면 해당 값을 반환
            return dy[n][r];
        }
        if (n === r || r === 0) { // nCr에서 n==r이거나 r==0인 경우 1을 반환
            return 1;
        } else {
            return dy[n][r] = combi(n - 1, r - 1) + combi(n - 1, r); // 조합 공식에 따라 값을 계산하고 메모이제이션 배열에 저장
        }
    }

    function DFS(L, sum) {
        if (flag) {
            return; // 답을 찾으면 더 이상 탐색하지 않음
        }
        if (L === n && sum === f) { // 수열이 완성되고, 그 합이 f와 같다면
            answer = p.slice(); // 현재 수열을 답으로 저장
            flag = 1;
        } else {
            for (let i = 1; i <= n; i++) {
                if (ch[i] === 0) { // 숫자 i가 사용되지 않았다면
                    ch[i] = 1; // 숫자 i를 사용 중으로 표시
                    p[L] = i; // 현재 위치 L에 숫자 i를 저장
                    console.log(p);
                    DFS(L + 1, sum + (b[L] * p[L])); // b[L]은 해당 위치의 가중치, p[L]은 현재 위치에 선택된 숫자
                    ch[i] = 0; // 백트래킹: 숫자 i 사용 표시 해제
                }
            }
        }
    }

    for (let i = 0; i < n; i++) {
        b[i] = combi(n - 1, i); // 각 위치에 대해 가중치를 b 배열에 저장
    }

    DFS(0, 0); // DFS 탐색 시작
    return answer;
}

console.log(solution(4, 16)); // [3, 1, 2, 4]