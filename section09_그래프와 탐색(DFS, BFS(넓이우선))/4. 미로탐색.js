// 미로탐색(DFS)
// 7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요. 출발점은 격자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다. 
// 격자판의 1은 벽이고, 0은 통로이다. 격자판의 움직임은 상하좌우로만 움직인다. 
// 미로가 다음과 같다면 위의 지도에서 출발점에서 도착점까지 갈 수 있는 방법의 수는 8가지이다.

// 4방향탐색을 통해 풀 수 있다. 02_07 봉우리(4방향 탐색) 문제 참고

function solution(board) {
    let answer = 0;
    // 12시 3시 6시 9시
    let dx = [-1, 0, 1, 0]; // 행 (dx: direction x)
    let dy = [0, 1, 0, -1]; // 열 (dy: direction y)

    function DFS(x, y) {
        if (x == 6 && y == 6) { // 종착점 도착
            answer++;
        } else {
            for (let i = 0; i < 4; i++) { // (12시, 3시, 6시, 9시) -> 4개 방향 탐색
                let nx = x + dx[i]; // nx는 행의 좌표
                let ny = x + dy[i]; // ny는 행의 좌표
                // nx >= 0 : 좌표가 0보다 작아지면, 격자판의 범위를 벗어나게 됨 (격자판의 범위 안에서만 탐색하도록 함)
                // nx < n : 좌표가 격자판의 크기 n보다 작은지를 확인 (격자판의 범위 안에서만 탐색하도록 함)
                // board[nx][ny] == 0 : 통로인지 탐색
                if (nx >= 0 && ny >= 0 && nx < 6 && ny < 6 && board[nx][ny] === 0) {
                    board[nx][ny] = 1; // 방문 표시 (벽으로 변경)
                    DFS(nx, ny);ㄴ
                    board[nx][ny] = 0; // 백트래킹: 이전 상태로 되돌림
                }
            }
        }
    }

    board[0][0] = 1;; // 출발점 방문 표시 -> 잊지않기!!
    DFS(0, 0); // 출발점
    return answer;
}

let arr = [
    [0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1],
    [1, 1, 0, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 0, 0]
];

console.log(solution(arr)); // 8