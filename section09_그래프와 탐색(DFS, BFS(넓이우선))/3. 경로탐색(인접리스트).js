// 방향그래프가 주어지면 1번 정점에서 N번 정점으로 가는 모든 경로의 가지 수를 출력하는 프로그램을 작성하세요. 
// 아래 그래프에서 1번 정점에서 5번 정점으로 가는 가지 수는 총 6가지입니다.

// '인접행렬'(앞 문제)은, 노드의 개수가 적을 때 사용할 수 있는 방법. 
// 만약 노드의 개수가 많다면 '인접리스트' 방식을 이용 -> 이 '인접리스트' 방식 추천!!!!⭐️ 더 쉬움!!

// [1]<->[2]-->[5]      ch배열로 들린 노드 체크 (0번 비워둠)
//  | \ / ↑    ↗        0 1 2 3 4 5
//  ↓ ↙ ↘ |  /
// [3]-->[4]

// 1 2 3 4 5
// 1 2 5            -> ch = [0, 1, 1, 0, 0, 1] -> 경로를 따라 다시 돌아오면서 0으로 초기화 (backtracking)
// 1 3 4 2 5
// 1 3 4 5
// 1 4 2 5
// 1 4 5

// graph[v][i] -> v노드에서 갈 수 있는 노드 번호들. (i < graph[v].length까지 돌면 됨)
//     0  1  2  3  4  5   -> graph 배열 (인접리스트)
//    -----------------
// 1 | 2  3  4
// 2 | 1  3  5
// 3 | 4
// 4 | 2  5
// 5 | 

// 노드가 V개, 간선이 E개 라면
// 시간복잡도 : 전체 노드에 대한 탐색을 수행하는 경우, 각 노드마다 연결된 노드만 확인 가능하여, 전체 간선의 개수만큼만 확인 -> O(E)

function solution(n, arr) {
    let answer = 0;
    let graph = Array.from(Array(n + 1), () => Array()); // 행의 길이만 n+1으로 설정 -> 인덱스 1번부터 사용 (0번 비워둠)
    let ch = Array.from({ length: n + 1 }, () => 0); // 길이를 n+1으로 설정 -> 인덱스 1번부터 사용 (0번 비워둠)
    // let path = []; // 테스트 코드 path(경로)

    for (let [a, b] of arr) {
        graph[a].push(b);
    }

    function DFS(v) {
        if (v === n) {
            answer++;
            // console.log(path);
        } else {
            for (let nv of graph[v]) {
                if (ch[nv] === 0) {
                    ch[nv] = 1;
                    // path.push(nv);
                    DFS(nv);
                    ch[nv] = 0;
                    // path.pop();
                }
            }
        }
    }

    // path.push(1);
    ch[1] = 1; // 출발점은 무조건 1 처리해주기(안하면 오류남. 없애보기)
    DFS(1);
    
    return answer;
}

let arr = [[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 5], [3, 4], [4, 2], [4, 5]];
console.log(solution(5, arr)); // 6