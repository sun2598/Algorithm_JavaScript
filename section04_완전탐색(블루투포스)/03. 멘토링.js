// 현수네 반 선생님은 반 학생들의 수학점수를 향상시키기 위해 멘토링 시스템을 만들려고 합니다. 
// 멘토링은 멘토(도와주는 학생)와 멘티(도움을 받는 학생)가 한 짝이 되어 멘토가 멘티의 수학공부를 도와주는 것입니다.
// 선생님은 M번의 수학테스트 등수를 가지고 멘토와 멘티를 정합니다.
// 만약 A학생이 멘토이고, B학생이 멘티가 되는 짝이 되었다면, A학생은 M번의 수학테스트에서 모두 B학생보다 등수가 앞서야 합니다.
// M번의 수학성적이 주어지면 멘토와 멘티가 되는 짝을 만들 수 있는 경우가 총 몇 가지 인지 출력하는 프로그램을 작성하세요.

function solution(test) {
    let answer = 0; // 가능한 멘토-멘티 짝의 수를 저장할 변수

    m = test.length; // 수학 테스트의 횟수 (M번)
    n = test[0].length; // 학생의 수 (반의 학생 수, N명)
    
    // 모든 학생 쌍을 검사하여 멘토-멘티가 될 수 있는지 확인
    for (let i = 1; i <= n; i++) { // 멘토가 될 수 있는 학생 (i)
        for (let j = 1; j <= n; j++) { // 멘티가 될 수 있는 학생 (j)
            let cnt = 0; // 특정 학생 쌍(i, j)가 멘토-멘티가 될 수 있는 조건을 만족하는 테스트의 횟수
            
            // 모든 수학 테스트 결과를 검사
            for (let k = 0; k < m; k++) { // 각 테스트 번호 (k)
                let pi = pj = 0; // i, j 학생의 등수를 저장할 변수
                // 각 테스트에서 학생들의 등수 찾기
                for (let s = 0; s < n; s++) { // 각 학생의 등수 (s)
                    if (test[k][s] === i) pi = s; // i 학생의 등수
                    if (test[k][s] === j) pj = s; // j 학생의 등수
                }
                // i 학생이 j 학생보다 등수가 앞선 경우
                if (pi < pj) {
                    cnt++; // 조건을 만족하는 테스트의 횟수를 증가
                }
            }
            // 모든 테스트에서 i 학생이 j 학생보다 등수가 앞섰다면, 해당 학생 쌍은 멘토-멘티가 될 수 있음
            if (cnt === m) {
                answer++; // 가능한 멘토-멘티 짝의 수를 증가
            }
        }
    }
    return answer; // 총 가능한 멘토-멘티 짝의 수를 반환
}

let arr = [
    [3, 4, 1, 2],
    [4, 3, 2, 1],
    [3, 1, 4, 2],
];
console.log(solution(arr));